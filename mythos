#!/usr/bin/env lua

local luview = require 'luview'

function plot2d(input, kwargs)
   local lunum = require 'lunum'
   local shaders = require 'shaders'

   local window = luview.Window()
   local box = luview.BoundingBox()
   local height = luview.DataSource()
   local verts = luview.ParametricVertexSource3D()
   local srf = luview.TrianglesEnsemble()
   local image = luview.ImagePlane()
   local surfshd = luview.ShaderProgram()
   local pyluts = luview.MatplotlibColormaps()
   local lights = shaders.load_shader("multlights")
   local surfshd = shaders.load_shader("surfshd")
   local cmshade = shaders.load_shader("cbar")

   local act = {box=box, srf=srf, img=image}
   local Nx, Ny
   local mode = '2d'

   if type(input) == 'function' then
      Nx = 256
      Ny = 256
      local A = lunum.zeros{Nx,Ny}
      for i,j in A:indices() do
	 local u = -0.5 + i/Nx
	 local v = -0.5 + j/Ny
	 A[i*Ny + j] = input(u,v)
      end
      height:set_data(A)
   elseif type(input) == 'table' then
      local fname, A = next(input)
      Nx, Ny = table.unpack(A:shape())
      height:set_data(A)
   end

   height:set_normalize(true)
   height:set_mode("luminance")
   image:set_data("image", height)
   image:set_data("color_table", pyluts)
   image:set_scale(-1.0, Ny/Nx, 1.0)
   image:set_shader(cmshade)
   verts:set_input(height)
   scalars = verts:get_output("scalars")
   scalars:set_normalize(true)
   srf:set_data("triangles", verts:get_output("triangles"))
   srf:set_data("normals", verts:get_output("normals"))
   srf:set_data("color_table", pyluts)
   srf:set_data("scalars", scalars)
   srf:set_shader(surfshd)
   srf:set_alpha(1.0)
   srf:set_color(0.5, 0.5, 1.0)
   srf:set_orientation(-90,0,0)
   srf:set_position(0.0, 0.0, 0.0)
   srf:set_scale(1.0, 0.25, 1.0)
   box:set_color(0.2, 0.2, 0.2)
   box:set_shader(lights)
   box:set_scale(1.0, 1.0, 1.0)
   box:set_linewidth(0.5)
   window:set_color(table.unpack(kwargs.background or {0.5, 0.5, 0.5}))

   function srf:inc_height()
      local sx, sy, sz = self:get_scale()
      self:set_scale(sx, sy*1.1, sz)
   end
   function srf:dec_height()
      local sx, sy, sz = self:get_scale()
      self:set_scale(sx, sy/1.1, sz)
   end

   local function toggle_3d()
      if mode == '3d' then
	 act.srf = nil
	 act.box = nil
	 image:set_position(0.0, 0.0, 0.0)
	 image:set_orientation(0,0,-90)
	 window:set_position(0,0,-1.2)
	 window:set_orientation(0,0,0)
	 mode = '2d'
      elseif mode == '2d' then
	 act.srf = srf
	 act.box = box
	 image:set_position(0.0, -0.5, 0.0)
	 image:set_orientation(-90,0,0)
	 window:set_position(0,0,-2.0)
	 window:set_orientation(18,0,0)
	 mode = '3d'
      end
   end
   toggle_3d()

   window:set_callback("]", function() pyluts:next_colormap() end, "next colormap")
   window:set_callback("[", function() pyluts:prev_colormap() end, "previous colormap")
   window:set_callback("b", function() act.box = (act.box and {nil} or {box})[1] end,
                       "toggle bounding box")
   window:set_callback("g", function() act.srf = (act.srf and {nil} or {srf})[1] end,
                       "toggle 3d surface")
   window:set_callback("t", function() act.img = (act.img and {nil} or {img})[1] end,
                       "toggle 2d image")
   window:set_callback("H", function() srf:inc_height() end, "increase surface height")
   window:set_callback("h", function() srf:dec_height() end, "increase surface height")
   window:set_callback("i", function() toggle_3d() end, "toggle 2d/3d mode")
   window:render_scene(act)
end


function main()
   local optparse = require 'optparse'
   local parser = optparse.OptionParser{
      usage="%prog [options] [input files]", version="0.2.0"}

   parser.add_option{
      "-h", "--help", action="store_true", dest="help",
      help="print help"}
   parser.add_option{
      "-f", "--func", action="store", dest="func",
      help="function to plot: f(x,y)"}
   parser.add_option{
      "-d", "--dset", action="store", dest="dset",
      help="named HDF5 dataset"}
   parser.add_option{
      "--background", action="store", dest="background",
      help="scene background color"}

   local LuviewColors = {black = {0.00, 0.00, 0.00},
			 white = {1.00, 1.00, 1.00},
			 grey  = {0.50, 0.50, 0.50},
			 sand  = {0.85, 0.83, 0.61}}

   local opts, args = parser.parse_args()
   if opts.help then
      opt.print_help()
      os.exit()
   end
   local kwargs = {background = LuviewColors[opts.background or "grey"]}

   if #args > 0 then
      local hdf5 = require 'hdf5'
      local series = { }
      for _,fname in ipairs(args) do
	 hdf5.open_file(fname)
	 table.insert(series, hdf5.read_array(opts.dset))
	 hdf5.close_file()
      end
      if not opts.dset then
	 error "HDF5 input requires a the name of a data set, use -d"
      end
      plot2d(series, kwargs)
   end

   if opts.func then
      local func = load(([[return (function(x,y)
				      return %s
				   end)]]):format(opts.func), nil, nil, math)()
      plot2d(func, kwargs)
   end
end

main()
